{
    "AWSTemplateFormatVersion": "2010-09-09",

    "Description": "Deploy clustered Moloch packet capture system enhanced with Suricata IDS",

    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {"default": "Network settings"},
                    "Parameters": ["VpcId", "Subnets", "VXLANLocation", "HTTPSLocation", "ViewerLocation", "SSHLocation"]
                },
                {
                    "Label": {"default": "EC2 Instance settings"},
                    "Parameters": ["InstanceType", "Keypair", "LatestAmiId"]
                },
                {
                    "Label": {"default": "Moloch settings"},
                    "Parameters": ["MolochDownloadURL", "ElasticsearchEndpointURL",
                        "AdminUser", "AdminPassword", "S2SPassword", "S3FMaxObjectSizeGB", "S3FlushInterval"]
                },
                {
                    "Label": {"default": "Auto-scaling settings"},
                    "Parameters": ["MinSize", "MaxSize", "OperatorEMail"]
                },
                {
                    "Label": {"default": "Viewer UI TLS settings"},
                    "Parameters": ["CertificateArn"]
                }
            ],
            "ParameterLabels": {
                "VpcId": {"default": "Which VPC should this be deployed to?"},
                "Subnets": {"default": "Subnets"},
                "VXLANLocation": {"default": "Traffic capture CIDR"},
                "HTTPSLocation": {"default": "HTTPS CIDR"},
                "ViewerLocation": {"default": "Port 8005 CIDR"},
                "SSHLocation": {"default": "SSH CIDR"},
                "InstanceType": {"default": "Instance type"},
                "Keypair": {"default": "Key pair"},
                "LatestAmiId": {"default": "Amazon Linux 2 AMI ID"},
                "MolochDownloadURL": {"default": "Moloch download URL"},
                "ElasticsearchEndpointURL": {"default": "Elasticsearch endpoint URL"},
                "AdminUser": {"default": "Administrator username"},
                "AdminPassword": {"default": "Administrator password"},
                "S2SPassword": {"default": "S2S password"},
                "S3FMaxObjectSizeGB": {"default": "Maximum packet capture size"},
                "S3FlushInterval": {"default": "New packet capture object interval"},
                "MinSize": {"default": "Minumum number of instances"},
                "MaxSize": {"default": "Maximum number of instances"},
                "OperatorEMail": {"default": "Auto-scale notifications email address"},
                "CertificateArn": {"default": "TLS Certificate ARN"}
            }
        }
    },

    "Parameters": {
        "VpcId" : {
            "Type" : "AWS::EC2::VPC::Id",
            "Description" : "VpcId of your existing Virtual Private Cloud (VPC)",
            "ConstraintDescription" : "must be the VPC Id of an existing Virtual Private Cloud."
        },
        "S3FlushInterval": {
            "Type": "Number",
            "Description": "Write new pcap object to S3 every x minutes, 0 to disable",
            "Default": 1,
            "ConstraintDescription": "must be between 0 and 720",
            "MinValue": 0,
            "MaxValue": 720
        },
        "S3FMaxObjectSizeGB": {
            "Type": "Number",
            "Description": "Maximum pcap file size to store in S3 in GB",
            "Default": 4,
            "ConstraintDescription": "must be between 0.01 and 1024",
            "MinValue": 0.01,
            "MaxValue": 1024
        },
        "MinSize": {
            "Type": "Number",
            "Description": "Minumum number of instances in the Auto Scaling group",
            "Default": 2,
            "ConstraintDescription": "must be 1 or larger",
            "MinValue": 1
        },
        "MaxSize": {
            "Type": "Number",
            "Description": "Maxiumum number of instances in the Auto Scaling group",
            "ConstraintDescription": "must be 1 or larger",
            "Default": 2,
            "MinValue": 1
        },
        "Subnets" : {
            "Type" : "List<AWS::EC2::Subnet::Id>",
            "Description" : "The list of SubnetIds in your Virtual Private Cloud (VPC)",
            "ConstraintDescription" : "must be a list of existing subnets associated with at least two different availability zones. They should be residing in the selected VPC."
        },
        "InstanceType": {
            "Type": "String",
            "Default": "t3.small",
            "AllowedValues": [
                "t3.small",
                "t3.medium",
                "t3.large",
                "t3a.small",
                "t3a.medium",
                "t3a.large",
                "m5.large",
                "m5a.large",
                "m5n.large",
                "c5.large",
                "c5n.large"
            ],
            "Description": "Enter instance type"
        },
        "Keypair": {
            "Type": "AWS::EC2::KeyPair::KeyName",
            "ConstraintDescription": "must be the name of an existing EC2 KeyPair.",
            "Description": "Key pair for EC2 instances"
        },
        "OperatorEMail": {
            "Description": "E-mail address to notify if there are any scaling operations",
            "Type": "String",
            "AllowedPattern": "([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)",
            "ConstraintDescription": "must be a valid email address."
        },   
        "LatestAmiId": {
            "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
            "Default": "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"
        },
        "CertificateArn": {
            "Type": "String",
            "Description": "TLS Certificate ARN from AWS Certificate Manager"
        },
        "SSHLocation": {
            "Type": "String",
            "Default": "0.0.0.0/0",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x.",
            "Description": "Allow SSH access from x.x.x.x/x",
            "MaxLength": "18",
            "MinLength": "9"
        },
        "VXLANLocation": {
            "Type": "String",
            "Default": "0.0.0.0/0",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x.",
            "Description": "Allow VXLAN traffic from x.x.x.x/x",
            "MaxLength": "18",
            "MinLength": "9"
        },
        "HTTPSLocation": {
            "Type": "String",
            "Default": "0.0.0.0/0",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x.",
            "Description": "Allow HTTPS access from x.x.x.x/x",
            "MaxLength": "18",
            "MinLength": "9"
        },
        "ViewerLocation": {
            "Type": "String",
            "Default": "0.0.0.0/0",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x.",
            "Description": "Allow direct access to Moloch Viewer port 8005 from x.x.x.x/x",
            "MaxLength": "18",
            "MinLength": "9"
        },
        "S2SPassword": {
            "Type": "String",
            "NoEcho": true,
            "Description": "Enter S2S password, it can be random and it is not exposed to the end user",
            "ConstraintDescription": "must be at least six alphanumeric characters",
            "MinLength": "6",
            "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*"
        },
        "MolochDownloadURL": {
            "Type": "String",
            "Default": "https://s3.amazonaws.com/files.molo.ch/moloch-master.centos7.x86_64.rpm",
            "Description": "Enter Moloch RPM package download URL",
            "MinLength": "5"
        },
        "AdminUser": {
            "Type": "String",
            "Default": "admin",
            "Description": "Enter admin username",
            "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
            "ConstraintDescription": "between 1 and 16 alphanumeric characters",
            "MinLength": "1",
            "MaxLength": "16"
        },
        "AdminPassword": {
            "Type": "String",
            "NoEcho": true,
            "Description": "Enter admin password",
            "ConstraintDescription": "must be at least six alphanumeric characters",
            "MinLength": "6",
            "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*"
        },
        "ElasticsearchEndpointURL": {
            "Type": "String",
            "Description": "Enter Elasticsearch Endpoint URL without the trailing forward slash",
            "MinLength": "5"
        }
    },
    "Resources": {
        "IAMRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "S3BucketReadWrite",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:PutObject",
                                        "s3:GetObject"
                                    ],                                
                                    "Resource": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:aws:s3:::",
                                                {
                                                    "Ref": "S3Bucket"
                                                },
                                                "/*"
                                            ]
                                        ]
                                    }
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "InstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "IAMRole"
                    }
                ]
            }
        },
        "S3Bucket": {
            "Type": "AWS::S3::Bucket",
            "DeletionPolicy": "Retain"
        },
        "NotificationTopic": {
            "Type": "AWS::SNS::Topic",
            "Properties": {
            "Subscription": [ { "Endpoint": { "Ref": "OperatorEMail" }, "Protocol": "email" } ]
            }
        },
        "VXLANLoadBalancer": {
            "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "Properties": {
                "Scheme": "internal",
                "Subnets": { "Ref": "Subnets" },
                "Type": "network"
            }
        },
        "TrafficMirrorTarget": {
            "Type": "AWS::EC2::TrafficMirrorTarget",
            "Properties": {
                "NetworkLoadBalancerArn": { "Ref": "VXLANLoadBalancer"}
            }
        },
        "VXLANListener": {
            "Type": "AWS::ElasticLoadBalancingV2::Listener",
            "Properties": {
                "DefaultActions": [
                    {
                        "Type": "forward",
                        "TargetGroupArn": { "Ref" : "CaptureTargetGroup" } 
                    }
                ],
                "LoadBalancerArn": { "Ref" : "VXLANLoadBalancer"},
                "Port": 4789,
                "Protocol": "UDP"
            }
        },
        "ViewerLoadBalancer": {
            "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "Properties": {
                "Scheme": "internet-facing",
                "Subnets": { "Ref": "Subnets" },
                "SecurityGroups": [
                    {"Ref": "ViewerLBSecurityGroup" }
                ],
                "Type": "application"
            }
        },
        "ViewerHTTPSListener": {
            "Type": "AWS::ElasticLoadBalancingV2::Listener",
            "Properties": {
                "Certificates": [
                    {"CertificateArn": {"Ref": "CertificateArn"}}
                ],
                "DefaultActions": [
                    {
                        "Type": "forward",
                        "TargetGroupArn": { "Ref" : "ViewerTargetGroup" } 
                    }
                ],
                "LoadBalancerArn": { "Ref" : "ViewerLoadBalancer"},
                "Port": 443,
                "Protocol": "HTTPS"
            }
        },
        "ViewerHTTPListener": {
            "Type": "AWS::ElasticLoadBalancingV2::Listener",
            "Properties": {
                "DefaultActions": [
                    {
                        "Type": "redirect",
                        "RedirectConfig": {
                            "Protocol": "HTTPS",
                            "Port": "443",
                            "Host": "#{host}",
                            "Path": "/#{path}",
                            "Query": "#{query",
                            "StatusCode": "HTTP_301"
                        }
                    }
                ],
                "LoadBalancerArn": { "Ref" : "ViewerLoadBalancer"},
                "Port": 80,
                "Protocol": "HTTP"
            }
        },


        "AutoScalingGroup": {
            "Type" : "AWS::AutoScaling::AutoScalingGroup",
            "Properties" : {
                "VPCZoneIdentifier": { "Ref": "Subnets" },
                "MinSize" : { "Ref" : "MinSize"},
                "MaxSize" : { "Ref" : "MaxSize"},
                "TargetGroupARNs": [
                    { "Ref": "CaptureTargetGroup"},
                    { "Ref": "ViewerTargetGroup"}
                ],
                "LaunchTemplate": {
                    "LaunchTemplateId": { "Ref" : "LaunchTemplate" },
                    "Version": "1"
                },
                "HealthCheckType": "ELB",
                "HealthCheckGracePeriod": 600,
                "NotificationConfigurations": [
                    {
                        "TopicARN": { "Ref": "NotificationTopic" },
                        "NotificationTypes": [
                            "autoscaling:EC2_INSTANCE_LAUNCH",
                            "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
                            "autoscaling:EC2_INSTANCE_TERMINATE",
                            "autoscaling:EC2_INSTANCE_TERMINATE_ERROR",
                            "autoscaling:TEST_NOTIFICATION"
                        ]
                    }
                ]
            },
            "CreationPolicy": {
                "ResourceSignal": {
                    "Count": {"Ref": "MinSize"}
                }
            }
        },
        "CaptureTargetGroup": {
            "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties": {
                "HealthCheckPort": "22",
                "Port": 4789,
                "Protocol": "UDP",
                "TargetType": "instance",
                "VpcId": { "Ref" : "VpcId"}
            }
        },
        "ViewerTargetGroup": {
            "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties": {
                "HealthCheckPort": "8005",
                "Port": 8005,
                "Protocol": "HTTP",
                "Matcher": {
                    "HttpCode": "401"
                },
                "TargetType": "instance",
                "VpcId": { "Ref" : "VpcId"}
            }
        },
        "LaunchTemplate": {
            "Type": "AWS::EC2::LaunchTemplate",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "configSets": {
                        "configure-all": [
                            "install-epel",
                            "install-suricata",
                            "install-moloch-dependencies",
                            "install-moloch"
                        ]
                    },
                    "install-epel": {
                        "commands": {
                            "install-epel-extra": {
                                "command": "amazon-linux-extras install epel -y"
                            }
                        }
                    },
                    "install-suricata": {
                        "packages": {
                            "yum": {
                                "suricata": []
                            }
                        },
                        "files": {
                            "/etc/sysconfig/suricata": {
                                "content": "OPTIONS=\"--set decoder.vxlan.enabled=true -k none -i eth0 --user suricata udp port 4789\""
                            }
                        },
                        "commands": {
                            "1-update-suricata": {
                                "command": "suricata-update"
                            },
                            "2-enable-hourly-updates": {
                                "command":  "echo \"10 * * * * suricata-update && suricatasc -c reload-rules\" | crontab"
                            }
                        },
                        "services": {
                            "sysvinit": {
                                "suricata": {
                                    "enabled": "true",
                                    "ensureRunning" : "true",
                                    "files": ["/etc/suricata/suricata.yaml"]
                                }
                            }
                        }
                    },
                    "install-moloch-dependencies": {
                        "packages": {
                            "yum": {
                                "libyaml-devel": [],
                                "perl-JSON": [],
                                "perl-libwww-perl": [],
                                "perl-LWP-Protocol-https": []
                            }
                        }
                    },
                    "install-moloch": {
                        "packages": {
                            "rpm": {
                                "moloch": {"Ref": "MolochDownloadURL"}
                            },
                            "yum": {
                                "crudini": []
                            }
                        },
                        "files": {
                            "/data/moloch/Configure-answers": {
                                "content": { "Fn::Join": [ "\n", [
                                    "eth0",
                                    "no",
                                    {"Ref": "ElasticsearchEndpointURL"},
                                    {"Ref": "S2SPassword"},
                                    "yes"
                                ] ] }
                            },
                            "/data/moloch/db/safeinit.sh": {
                                "content": { "Fn::Join": [ "\n", [
                                    "delay=$RANDOM",
                                    "let 'delay %= 20'",
                                    "echo \"Sleeping for $delay seconds...\"",
                                    "sleep $delay",
                                    "echo 'Checking ES URL:' $1",
                                    "if /data/moloch/db/db.pl $1 info 2>/dev/null | grep 'DB Version' | grep '\\-1' >/dev/null",
                                    "then",
                                    "    echo 'ES running but not initialised, initialising...'",
                                    "    /data/moloch/db/db.pl $1 init && /data/moloch/bin/moloch_add_user.sh \"$2\" \"Admin User\" \"$3\" --admin",
                                    "    exit $?",
                                    "elif /data/moloch/db/db.pl $1 info >/dev/null 2>&1",
                                    "then",
                                    "    echo 'ES running and initialised. Nothing to do.'",
                                    "    exit 0",
                                    "else",
                                    "    echo 'ES not reachable'",
                                    "    exit 1",
                                    "fi"
                                ] ] },
                                "mode": "000700"
                            }
                        },
                        "commands": {
                            "1-remove-yum-prompt": {
                                "command": "sed -i \"s/yum install/yum -y install/g\" /data/moloch/bin/Configure" 
                            },
                            "2-configure-moloch": {
                                "command": "/data//moloch/bin/Configure < /data/moloch/Configure-answers"
                            },
                            "3-add-plugins": {
                                "command": "crudini --set /data/moloch/etc/config.ini default plugins \"suricata.so; writer-s3.so\""
                            },
                            "4-add-suricata-alert-file": {
                                "command": "crudini --set /data/moloch/etc/config.ini default suricataAlertFile /var/log/suricata/eve.json"
                            },
                            "5-add-bpf": {
                                "command": "crudini --set /data/moloch/etc/config.ini default bpf \"udp port 4789\""
                            },
                            "6.1-set-S3-region": {
                                "command": {"Fn::Join": [" ", [
                                    "crudini --set /data/moloch/etc/config.ini default s3Region",
                                    { "Ref": "AWS::Region" }
                                ] ]
                                }
                            },
                            "6.2-set-S3-bucket": {
                                "command": {"Fn::Join": [" ", [
                                    "crudini --set /data/moloch/etc/config.ini default s3Bucket",
                                    { "Ref": "S3Bucket" }
                                ] ]
                                }
                            },
                            "6.3-set-viewer-plugin": {
                                "command": "crudini --set /data/moloch/etc/config.ini default viewerPlugins writer-s3/index.js"
                            },
                            "6.5-set-pcap-write-method": {
                                "command": "crudini --set /data/moloch/etc/config.ini default pcapWriteMethod s3"
                            },
                            "6.6-set-maxFileTimeM": {
                                "command": {"Fn::Join": [" ", [
                                    "crudini --set /data/moloch/etc/config.ini default maxFileTimeM",
                                    { "Ref": "S3FlushInterval" }
                                ] ]
                                }
                            },
                            "6.7-set-maxFileSizeG": {
                                "command": {"Fn::Join": [" ", [
                                    "crudini --set /data/moloch/etc/config.ini default maxFileSizeG",
                                    { "Ref": "S3FMaxObjectSizeGB" }
                                ] ]
                                }
                            },
                            "7-chmod-suricata-logs": {
                                "command": "chmod 755 /var/log/suricata"
                            },
                            "8-ES-init":{
                                "command": {"Fn::Join": [ " ", [
                                    "/data/moloch/db/safeinit.sh",
                                    {"Ref":"ElasticsearchEndpointURL"},
                                    {"Ref": "AdminUser"},
                                    {"Ref": "AdminPassword"}
                                ] ] }
                            }                            
                        },
                        "services": {
                            "sysvinit": {
                                "molochcapture": {
                                    "enabled": "true",
                                    "ensureRunning": "true"
                                },
                                "molochviewer": {
                                    "enabled": "true",
                                    "ensureRunning": "true"
                                }
                            }
                        }
                    }
                }
            },
            "Properties": {
                "LaunchTemplateData": {
                    "ImageId": { "Ref": "LatestAmiId" },
                    "IamInstanceProfile": {
                        "Name": { "Ref": "InstanceProfile" }
                    },
                    "InstanceType": { "Ref": "InstanceType" },
                    "KeyName": { "Ref": "Keypair" },
                    "SecurityGroupIds": [
                        {
                            "Ref": "InstanceSecurityGroup"
                        }
                    ],
                    "UserData": {
                        "Fn::Base64": {
                            "Fn::Join": [
                                "\n",
                                [
                                    "#!/bin/bash -xe",
                                    "yum install -y aws-cfn-bootstrap",
                                    {
                                        "Fn::Join": [
                                            " ",
                                            [
                                                "/opt/aws/bin/cfn-init -v -c configure-all",
                                                "--stack",
                                                {
                                                    "Ref": "AWS::StackName"
                                                },
                                                "--resource LaunchTemplate",
                                                "--region",
                                                {
                                                    "Ref": "AWS::Region"
                                                }
                                            ]
                                        ]
                                    },
                                    {
                                        "Fn::Join": [
                                            " ",
                                            [
                                                "/opt/aws/bin/cfn-signal",
                                                "--stack",
                                                {
                                                    "Ref": "AWS::StackName"
                                                },
                                                " --region ",
                                                {
                                                    "Ref": "AWS::Region"
                                                },
                                                "--resource AutoScalingGroup"
                                            ]
                                        ]
                                    }
                                ]
                            ]
                        }
                    }
                }
            }
        },
        "ViewerLBSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable access to HTTP and HTTPS",
                "SecurityGroupIngress": [
                    {
                        "CidrIp": {
                            "Ref": "HTTPSLocation"
                        },
                        "FromPort": 443,
                        "IpProtocol": "tcp",
                        "ToPort": 443
                    },
                    {
                        "CidrIp": {
                            "Ref": "HTTPSLocation"
                        },
                        "FromPort": 80,
                        "IpProtocol": "tcp",
                        "ToPort": 80
                    }

                ],
                "VpcId": { "Ref": "VpcId" }
            }
        },

        "InstanceSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable access to SSH, VXLAN and Moloch viewer port 8005",
                "SecurityGroupIngress": [
                    {
                        "CidrIp": {
                            "Ref": "SSHLocation"
                        },
                        "FromPort": 22,
                        "IpProtocol": "tcp",
                        "ToPort": 22
                    },
                    {
                        "CidrIp": {
                            "Ref": "VXLANLocation"
                        },
                        "FromPort": 4789,
                        "IpProtocol": "udp",
                        "ToPort": 4789
                    },
                    {
                        "CidrIp": {
                            "Ref": "ViewerLocation"
                        },
                        "FromPort": 8005,
                        "IpProtocol": "tcp",
                        "ToPort": 8005
                    }
                ],
                "VpcId": { "Ref": "VpcId" }
            }
        }
    },

    "Outputs": {
        "S3Bucket": {
            "Description": "S3 bucket for packet captures",
            "Value": { "Ref": "S3Bucket"}
        },
        "MirrorTarget": {
            "Description": "VPC Traffic Mirror Target",
            "Value": { "Ref": "TrafficMirrorTarget"}
        },
        "ViewerURL": {
            "Description": "Moloch Viewer URL",
            "Value": { "Fn::Join": ["",
                ["https://", {"Fn::GetAtt": ["ViewerLoadBalancer", "DNSName"] } 
                ] ] 
            }
        }
    }
}